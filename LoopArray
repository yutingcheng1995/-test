import java.io.*;
class LoopQueue<E>{
    private E[] data;
    private int front;
    private int tail;
    public LoopQueue(int capacity){
        //capacity是用户定义的循环队列的size，实例化时需要增加1个空间；
        this.data = (E[]) new Object[capacity+1];
        this.front = 0;
        this.tail = 0;
    }
    public LoopQueue(){
        this(10);
    }
    public boolean isEmpty(){
        return this.front == this.tail;
    }
    public boolean isFull(){
        return this.front == (this.tail+1)% data.length;
    }
    public int getCapacity(){
        return this.data.length - 1;
    }
    public int getSize(){
        if(this.isFull()){
            return this.getCapacity();
        }
        else if(this.isEmpty()){
            return 0;
        }
        else if(this.front < this.tail){
            return this.tail - this.front;
        }
        else{
            return this.data.length - (this.front - this.tail) ;
        }
    }
    public void enqueue(E e){
        if(this.isFull()){
            resize(getCapacity() * 2);//为什么不是data.length?
        }
        data[tail] = e;
        tail = (tail+1)%data.length;
    }
    public E dequeue(){
        if(isEmpty()){
            throw new IllegalArgumentException("Dequeue failed! Empty Queue!");
        }
        E e = data[front];
        data[front] = null;
        front = (front + 1) % data.length;
        if(getSize() == getCapacity() / 4 && getCapacity() / 2 != 0){
            resize(getCapacity() / 2);
        }
        return e;
    }
    public E getFront(){//出队列，读队首需要先判断是否为空
        if(isEmpty()){
            throw new IllegalArgumentException("Dequeue failed! Empty Queue!");
        }
        return data[front];
    }
    private void resize(int newCapacity){
        E[] newData = (E[])new Object[newCapacity+1];
        for(int i = 0; i < getSize(); i++){
            newData[i] = data[(front + i) % data.length];
        }
        //front = 0;
        tail = getSize();//由于getSize()依赖front与tail的值，因此先修改tail
        front = 0;
        data = newData;
    }
    public String toString(){
        StringBuilder res = new StringBuilder();
        res.append(String.format("LoopQueue: size = %d , capacity = %d\n", getSize(), getCapacity()));
        res.append("Front [");
        for(int i = front; i != tail; i = (i+1) % data.length){
            res.append(data[i]);
            if((i + 1) % data.length!= tail){
                res.append(", ");
            }
        }
        res.append("] tail");
        return res.toString();
    }
}
