interface Queue<E>{
	public void enqueue(E e);
	public E dequeue();
	public E getFront();
	public int getSize();
	public boolean isEmpty();
}
class ArrayQueue<E> implements Queue<E> {
	private Array<E> array;//动态数组
	public ArrayQueue(int Capacity){
		array = new Array<>(Capacity);
	}
	public ArrayQueue(){
		array = new Array<>();
	}
	@Override
	public void enqueue(E e){
	  array.addLast(e);
	};
	@Override
	public E dequeue(){
		return array.removeFirst();
	};
	@Override
	public E getFront(){
		return array.getFirst();
	};
	@Override
	public int getSize(){
		return array.getSize();
	};
	@Override
	public boolean isEmpty(){
		return array.isEmpty();
	};
	@Override
    public String toString(){

        StringBuilder res = new StringBuilder();
        res.append(String.format("Queue: size = %d , capacity = %d\n", array.getSize(), array.getCapacity()));
        res.append("front[");
        for(int i = 0 ; i < array.getSize() ; i ++){
            res.append(array.get(i));
            if(i != array.getSize() - 1)
                res.append(", ");
        }
        res.append(']');
        return res.toString();
    }
}
