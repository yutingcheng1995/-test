import java.io.*;
import java.util.Stack;
/**
增加元素
是否包含
前序、中序、后序（递归、非递归），非递归借助栈实现
广度优先遍历：层序遍历（非递归），借助队列实现
*/
class BST<E extends Comparable<E>>{
    private class Node<E>{
        public E e;
        public Node left;
        public Node right;
        public Node(E e){
            this.e = e;
            left = null;
            right = null;
        }
    }
    private Node root;
    private int size;
    
    public BST(){
        root = null;
        size = 0;
    }
    
    public int size(){
        return size;
    }
    
    public boolean isEmpty(){
        return root == null;
    }
    /**
     * 
     * 
     */
    public void add(E e){
        root = add(root,e);
    }
    
    
    private Node add(Node node, E e){
        if(node == null){
            node = new Node(e);
            size++;
            return node;
        }
        if(e.compareTo((E)node.e) < 0){
            node.left = add(node.left, e);
        }
        //else if(e.compareTo(root.e) > 0){
        else{
            node.right = add(node.right, e);
        }
        return node;
    }
    
    public boolean contains(E e){
        return contains(root,e);
    }
    
    private boolean contains(Node node,E e){
        if(node == null){
            return false;
        }
        if(e.compareTo((E)node.e) < 0){
            return contains(node.left,e);
        }
        else if(e.compareTo((E)node.e) > 0){
            return contains(node.right,e);
        }
        else{
            return true;
        }
    }
    
    public void preOrder(){
        preOrder(root);
    }
    
    private void preOrder(Node node){
        if(node == null){
            return ;
        }//先写递归终止
        System.out.println(node.e);
        preOrder(node.left);
        preOrder(node.right);
    }
    public void preOrderNR(){
        Stack<Node> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            Node cur = stack.pop();
            System.out.println(cur.e);
            if(cur.right!=null){
             stack.push(cur.right);
            }
            if(cur.left!=null){
             stack.push(cur.left);
            }
        }
    }
    
     public void inOrder(){
        inOrder(root);
    }
    
    private void inOrder(Node node){
        if(node == null){
            return ;
        }//先写递归终止
        
        inOrder(node.left);
	System.out.println(node.e);
        inOrder(node.right);
    }
    public void postOrder(){
        inOrder(root);
    }
    
    private void postOrder(Node node){
        if(node == null){
            return ;
        }//先写递归终止
        
        postOrder(node.left);
        postOrder(node.right);
	System.out.println(node.e);
    }
    
        public void levelOrder(){
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            Node cur = queue.remove();
            System.out.println(cur.e);
            if(cur.left!=null){
                queue.add(cur.left);
            }
            if(cur.right!=null){
                queue.add(cur.right);
            }
        }
    }
    
    public String toString(){
        StringBuilder res = new StringBuilder();
        generateBSTString(root,0,res);
        return res.toString();
    }
    
    private void generateBSTString(Node node, int depth, StringBuilder res){
        if(node == null){
            res.append(generateDepthString(depth) + "null\n");
            return;
        }
        res.append(generateDepthString(depth) + node.e + "\n");
        generateBSTString(node.left,depth+1,res);
        generateBSTString(node.right,depth+1,res);
    }
    
    private String generateDepthString(int depth){
        StringBuilder res = new StringBuilder();
        for(int i =0 ; i< depth; i++){
            res.append("--");
        }
        return res.toString();
    }
}
public class test  
{
	public static void main (String[] args) throws java.lang.Exception
	{
		BST<Integer> bst = new BST<>();
		int[] nums = {5,3,6,2,4,8};
		for(int i = 0; i < nums.length; i++){
		    bst.add(nums[i]);
		}
		bst.preOrder();
		System.out.println();
		System.out.println(bst);
	}
}
