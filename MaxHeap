/**
二叉堆：（1）完全二叉树（2）父节点 >= all孩子节点（最大堆） || 父节点 <= all孩子节点（最小堆）
底层实现：动态数组
实现了类似队列的几个方法：
getSize()
isEmpty();
private: parent(index);leftChild(index);rightChild(index);siftUp(index);siftDown(index)
add(e):借助上浮函数实现，将新元素插入堆的尾部，将该元素上浮至适当位置（满足堆的基本性质）；
extractMax():借助下沉函数实现，将堆首和堆尾交换位置，删除堆尾，将堆首元素下沉至适当位置（同上）；
FindMax（）返回堆顶；
堆本身是可以实现排序的；每次删除堆首直到空即可；
*/

class MaxHeap<E extends Comparable<E>> {
    private Array<E> data;
    
    public MaxHeap(int capacity){
        data = new Array<E>(capacity);
    }
    
    public MaxHeap(){
        data = new Array<E>();
    }
    
    public int getSize(){
        return data.getSize();
    }
    
    public boolean isEmpty(){
        return data.isEmpty();
    }
    
    private int parent(int index){
        if(index == 0){
            throw new IllegalArgumentException("Index-0 has no parent.");
        }
        return (index-1)/2;
    }
    
    private int leftChild(int index){
        return index*2+1;
    }
    
    private int rightChild(int index){
        return index*2+2;
    }
    
    public void add(E e){
      data.addLast(e);
      siftUp(data.getSize()-1);
    }
    
   private void siftUp(int k){
        while(k > 0 && data.get(parent(k)).compareTo(data.get(k)) < 0){
              data.swap(parent(k),k);
                 k = parent(k);
        }
    }
    
    public E findMax(){
        if(data.getSize()==0){
            throw new IllegalArgumentException("Heap is empty");
        }
        return data.get(0);
    }
    public E extractMax(){
        E e = findMax();
        data.swap(0,data.getSize()-1);
        data.removeLast();
        siftDown(0);
        return e;
    }
    
    private void siftDown(int k){
        while(leftChild(k) < data.getSize()){
            int j = leftChild(k);
            if(j+1<data.getSize()){
                if(data.get(j+1).compareTo(data.get(j)) > 0){
                    j++;
                }
            }//找左右孩子中较大的孩子的index
            
          //  E max= data.get(j);
            if(data.get(k).compareTo(data.get(j))>=0){
                break;
            }
            else{
                data.swap(k,j);
            }
            k = j;
        }
    }
}

public class MyClass {  
   /**
   测试堆结构
   */
	public static void main (String[] args) throws java.lang.Exception
	{
		int n = 100;
		MaxHeap<Integer> maxHeap = new MaxHeap<>();
		Random random = new Random();
		for(int i = 0 ; i < n; i++){
		    maxHeap.add(random.nextInt(Integer.MAX_VALUE));
		}
		
		int[] arr = new int[n];
		for(int i = 0; i< n;i++){
		    arr[i] = maxHeap.extractMax();
		}
		
		for(int i=1;i<n;i++){
		    if(arr[i-1] < arr[i]){
		        throw new IllegalArgumentException("Test Error!");
		    }
		}
		
		System.out.println("Test True!");
	}
}
